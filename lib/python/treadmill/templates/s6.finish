#!{{ _alias.execlineb }}

{% if monitor_policy -%}
{{ _alias.umask }} 0022
{{ _alias.redirfd }} -r 0 /dev/null
{{ _alias.redirfd }} -a 1 data/finish.log

{{ _alias.define }} LIMIT {{ monitor_policy.limit }}
{{ _alias.define }} INTERVAL {{ monitor_policy.interval }}

{% if monitor_policy.skip_path -%}
# This is used in cleanup to check container still needs cleaned up before
# evaluating the policy and potentially restarting the service
{{ _alias.if }} -n -t {
    {{ _alias.redirfd }} -a 2 /dev/null
    {{ _alias.stat }} {{ monitor_policy.skip_path }}
}
{%- endif %}  # !monitor_policy.skip_path

# Unix time
{{ _alias.backtick }} -n NOW {
    {{ _alias.date }} "+%s.%3N"
}
{{ _alias.importas }} -u -i NOW NOW

{{ _alias.importas }} -u -i EXIT 1
# The second argument is undefined when the prog was not killed by signal
{{ _alias.importas }} -u -D0 SIGNAL 2

{% if trace -%}
{{ _alias.foreground }} {
    {{ _alias.s6_ipcclient }} "{{ trace.path }}"
    {{ _alias.fdmove }} 1 7
    {{ _alias.define }} TRACEDATA "{{ trace.uniqueid }}.{{ trace.service }}.${EXIT}.${SIGNAL}"
    {{ _alias.printf }} "%014.3f,{{ trace.instanceid }},service_exited,%s" ${NOW} ${TRACEDATA}
}
{%- endif %}  # !trace

{{ _alias.backtick }} EXITINFO {
    {{ _alias.printf }} "%014.3f,%03d,%03d" ${NOW} ${EXIT} ${SIGNAL}
}
{{ _alias.importas }} -u -i EXITINFO EXITINFO

{% if monitor_policy.limit > 0 -%}
{{ _alias.if }} {
    {{ _alias.mkdir }} -p -- data/exits
}

# Append the exit info to the exists log file
{{ _alias.if }} {
    {{ _alias.redirfd }} -a 1 data/exits/log
    {{ _alias.echo }} ${EXITINFO}
}

# Check that the limit on the policy is not met by using number of lines in the
# exits log file
{{ _alias.backtick }} NUMLINES {
    {{ _alias.pipeline }} {
        {{ _alias.wc }} -l data/exits/log
    }
    {{ _alias.awk }} "{print \$1}"
}
{{ _alias.importas }} -u -i -n NUMLINES NUMLINES

# Exit 0 if limit is not met; else carry on
{{ _alias.if }} -t -n {
    {{ _alias.backtick }} BCRESULT {
        {{ _alias.heredoc }} 0 "${NUMLINES} > ${LIMIT}\n"
        {{ _alias.bc }} -l
    }
    {{ _alias.importas }} -u -i -n BCRESULT BCRESULT
    {{ _alias.exit }} ${BCRESULT}
}

# Get the first line of the exits log file as it is guaranteed to be the oldest
{{ _alias.backtick }} LAST {
    {{ _alias.head }} -1 data/exits/log
}
{{ _alias.importas }} -u -i -n LAST LAST

# Extract the unix time from the exit info
{{ _alias.backtick }} LASTTIME {
    {{ _alias.heredoc }} 0 ${LAST}
    {{ _alias.awk }} -F"," "{print \$1}"
}
{{ _alias.importas }} -u -i -n LASTTIME LASTTIME

# Make sure there are only limit lines in the exits log as the others are
# redundant
{{ _alias.if }} {
{{ _alias.redirfd }} -w 1 data/exits/log.tmp
    {{ _alias.tail }} --lines=${LIMIT} data/exits/log
}
{{ _alias.if }} {
    {{ _alias.mv }} data/exits/log.tmp data/exits/log
}

# Exit 0 if the last time has not exceeded the interval; else carry on
{{ _alias.if }} -t -n {
    {{ _alias.backtick }} BCRESULT {
        {{ _alias.heredoc }} 0 "( ${NOW} - ${LASTTIME} ) < ${INTERVAL}\n"
        {{ _alias.bc }} -l
    }
    {{ _alias.importas }} -u -i -n BCRESULT BCRESULT
    {{ _alias.exit }} ${BCRESULT}
}

{%- endif %}  # !monitor_policy.limit > 0

{% if monitor_policy.tombstone.uds -%}
# Send the uds over a uds
{{ _alias.foreground }} {
    {{ _alias.s6_ipcclient }} "{{ monitor_policy.tombstone.path }}"
    {{ _alias.fdmove }} 1 7
    {{ _alias.echo }} "{{ monitor_policy.tombstone.id }},${EXITINFO}"
}
{% else %}  # !monitor_policy.tombstone.uds
# Write the tombstone file
{{ _alias.define }} TOMBFILE "{{ monitor_policy.tombstone.path }}/{{ monitor_policy.tombstone.id }}"

{{ _alias.foreground }} {
    {{ _alias.touch }} "${TOMBFILE},${EXITINFO}"
}
{%- endif %}  # !monitor_policy.tombstone.uds

# Exit 125 as this instructs the supervisor not to restart
{{ _alias.exit }} 125
{%- endif %}  # !monitor_policy
